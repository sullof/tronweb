
[0m[0m
[0m  TronWeb Instance[0m
[0m    #constructor()[0m
    [32m  âœ“[0m[90m should create a full instance[0m
    [32m  âœ“[0m[90m should create an instance using an options object without private key[0m
    [32m  âœ“[0m[90m should create an instance using a full options object[0m
    [32m  âœ“[0m[90m should create an instance without a private key[0m
    [32m  âœ“[0m[90m should create an instance without an event server[0m
    [32m  âœ“[0m[90m should reject an invalid full node URL[0m
    [32m  âœ“[0m[90m should reject an invalid solidity node URL[0m
    [32m  âœ“[0m[90m should reject an invalid event server URL[0m
[0m    #version()[0m
    [32m  âœ“[0m[90m should verify that the version is available as static and non-static property[0m
[0m    #fullnodeVersion()[0m
    [32m  âœ“[0m[90m should verify that the version of the fullNode is available[0m
[0m    #setDefaultBlock()[0m
    [32m  âœ“[0m[90m should accept a positive integer[0m
    [32m  âœ“[0m[90m should correct a negative integer[0m
    [32m  âœ“[0m[90m should accept 0[0m
    [32m  âœ“[0m[90m should be able to clear[0m
    [32m  âœ“[0m[90m should accept "earliest"[0m
    [32m  âœ“[0m[90m should accept "latest"[0m
    [32m  âœ“[0m[90m should reject a decimal[0m
    [32m  âœ“[0m[90m should reject a string[0m
[0m    #setPrivateKey()[0m
    [32m  âœ“[0m[90m should accept a private key[0m
    [32m  âœ“[0m[90m should set the appropriate address for the private key[0m
    [32m  âœ“[0m[90m should reject an invalid private key[0m
    [32m  âœ“[0m[90m should emit a privateKeyChanged event[0m
[0m    #setAddress()[0m
    [32m  âœ“[0m[90m should accept a hex address[0m
    [32m  âœ“[0m[90m should accept a base58 address[0m
    [32m  âœ“[0m[90m should reset the private key if the address doesn't match[0m
    [32m  âœ“[0m[90m should not reset the private key if the address matches[0m
    [32m  âœ“[0m[90m should emit an addressChanged event[0m
[0m    #isValidProvider()[0m
    [32m  âœ“[0m[90m should accept a valid provider[0m
    [32m  âœ“[0m[90m should accept an invalid provider[0m
[0m    #setFullNode()[0m
    [32m  âœ“[0m[90m should accept a HttpProvider instance[0m
    [32m  âœ“[0m[90m should accept a valid URL string[0m
    [32m  âœ“[0m[90m should reject a non-string[0m
    [32m  âœ“[0m[90m should reject an invalid URL string[0m
[0m    #setSolidityNode()[0m
    [32m  âœ“[0m[90m should accept a HttpProvider instance[0m
    [32m  âœ“[0m[90m should accept a valid URL string[0m
    [32m  âœ“[0m[90m should reject a non-string[0m
    [32m  âœ“[0m[90m should reject an invalid URL string[0m
[0m    #setEventServer()[0m
    [32m  âœ“[0m[90m should accept a valid URL string[0m
    [32m  âœ“[0m[90m should reset the event server property[0m
    [32m  âœ“[0m[90m should reject an invalid URL string[0m
    [32m  âœ“[0m[90m should reject an invalid URL parameter[0m
[0m    #currentProviders()[0m
    [32m  âœ“[0m[90m should return the current providers[0m
[0m    #currentProvider()[0m
    [32m  âœ“[0m[90m should return the current providers[0m
[0m    #sha3()[0m
    [32m  âœ“[0m[90m should match web3 sha function[0m
[0m    #toHex()[0m
    [32m  âœ“[0m[90m should convert a boolean to hex[0m
    [32m  âœ“[0m[90m should convert a BigNumber to hex[0m
    [32m  âœ“[0m[90m should convert an object to an hex string[0m
    [32m  âœ“[0m[90m should convert a string to hex[0m
    [32m  âœ“[0m[90m should leave an hex string as is[0m
    [32m  âœ“[0m[90m should convert a number to an hex string[0m
    [32m  âœ“[0m[90m should throw an error if the value is not convertible[0m
[0m    #toUtf8[0m
    [32m  âœ“[0m[90m should convert an hex string to utf8[0m
    [32m  âœ“[0m[90m should convert an hex string to utf8[0m
    [32m  âœ“[0m[90m should throw an error if the string is not a valid hex string in strict mode[0m
[0m    #fromUtf8[0m
    [32m  âœ“[0m[90m should convert an utf-8 string to hex[0m
    [32m  âœ“[0m[90m should throw an error if the utf-8 string is not a string[0m
[0m    #toAscii[0m
    [32m  âœ“[0m[90m should convert a hex string to ascii[0m
    [32m  âœ“[0m[90m should throw an error if the string is not a valid hex string[0m
[0m    #fromAscii[0m
    [32m  âœ“[0m[90m should convert an ascii string to hex[0m
    [32m  âœ“[0m[90m should throw an error if the utf-8 string is not a string[0m
[0m    #toBigNumber[0m
    [32m  âœ“[0m[90m should convert a hex string to a bignumber[0m
    [32m  âœ“[0m[90m should convert a number to a bignumber[0m
    [32m  âœ“[0m[90m should convert a number string to a bignumber[0m
[0m    #toDecimal[0m
    [32m  âœ“[0m[90m should convert a hex string to a number[0m
    [32m  âœ“[0m[90m should convert a number to a bignumber[0m
    [32m  âœ“[0m[90m should convert a number string to a bignumber[0m
[0m    #fromDecimal[0m
    [32m  âœ“[0m[90m should convert a number to an hex string to a number[0m
    [32m  âœ“[0m[90m should convert a negative number to an hex string to a number[0m
[0m    #toSun[0m
    [32m  âœ“[0m[90m should convert some trx to sun[0m
[0m    #fromSun[0m
    [32m  âœ“[0m[90m should convert a negative number to an hex string to a number[0m
[0m    #isAddress[0m
    [32m  âœ“[0m[90m should verify that a string is a valid base58 address[0m
    [32m  âœ“[0m[90m should verify that a string is an invalid base58 address[0m
    [32m  âœ“[0m[90m should verify that a string is a valid hex address[0m
    [32m  âœ“[0m[90m should verify that a string is an invalid base58 address[0m
[0m    #createAccount[0m
    [32m  âœ“[0m[90m should create a new account[0m
[0m    #isConnected[0m
    [32m  âœ“[0m[90m should verify that tronWeb is connected to nodes and event server[0m
[0m    #getEventsByTransactionID[0m
[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should emit an unconfirmed event and get it[0m[31m (543ms)[0m
[0m    #getEventResult[0m
[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should emit an event and wait for it[0m[31m (2582ms)[0m

[0m  #contract.method[0m
[0m    #send()[0m
    [32m  âœ“[0m[90m should set accounts[2] as the owner and check it with getOwner(1)[0m
    [32m  âœ“[0m[90m should revert if trying to set TSeFTBYCy3r2kZNYsj86G6Yz6rsmPdYdFs as the owner[0m[31m (9057ms)[0m
    [32m  âœ“[0m[90m should set the val to 400[0m[31m (9064ms)[0m
[0m    #call()[0m
    [32m  âœ“[0m[90m should getOwner(1) and get accounts[2][0m
    [32m  âœ“[0m[90m should revert if call getOwner(2)[0m
    [32m  âœ“[0m[90m should revert if call getOwner2()[0m

[0m  TronWeb.lib.event[0m
[0m    #constructor()[0m
    [32m  âœ“[0m[90m should have been set a full instance in tronWeb[0m
[0m    #getEventsByTransactionID[0m
[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should emit an unconfirmed event and get it[0m[31m (2578ms)[0m
    [32m  âœ“[0m[90m should emit an event, wait for confirmation and get it[0m[31m (9062ms)[0m
[0m    #getEventsByContractAddress[0m
[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 0.5 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should emit an event and wait for it[0m[31m (3118ms)[0m
[0m    #contract.method.watch[0m
    [32m  âœ“[0m[90m should watch for an event[0m
    [32m  âœ“[0m[90m should only watch for an event with given filters[0m

[0m  TronWeb.lib.plugin[0m
[0m    #constructor()[0m
    [32m  âœ“[0m[90m should have been set a full instance in tronWeb[0m
[0m    #plug GetNowBlock into tronWeb.trx[0m
    [32m  âœ“[0m[90m should register the plugin GetNowBlock[0m
[0m    #plug BlockLib into tronWeb at first level[0m
    [32m  âœ“[0m[90m should register the plugin and call a method using a promise[0m
    [32m  âœ“[0m[90m should register and call a method using callbacks[0m
    [32m  âœ“[0m[90m should not register if tronWeb is instantiated with the disablePlugins option[0m

[0m  TronWeb.lib.providers[0m
[0m    #constructor()[0m
    [32m  âœ“[0m[90m should create a full instance[0m
    [32m  âœ“[0m[90m should throw if the host is not valid[0m
[0m    #setStatusPage()[0m
    [32m  âœ“[0m[90m should set a status page[0m
[0m    #isConnected()[0m
    [32m  âœ“[0m[90m should verify if the provider is connected[0m
    [32m  âœ“[0m[90m should return false if the url is not one of the expected provider[0m[31m (261ms)[0m
[0m    #request()[0m
    [32m  âœ“[0m[90m should request a route[0m
    [32m  âœ“[0m[90m should throw if the route is missed or returns an error[0m

[0m  TronWeb.transactionBuilder[0m
[0m    #constructor()[0m
    [32m  âœ“[0m[90m should have been set a full instance in tronWeb[0m
[0m    #sendTrx()[0m
    [32m  âœ“[0m[90m should send 10 trx from default address to accounts[1][0m
    [32m  âœ“[0m[90m should send 10 trx from accounts[0] to accounts[1][0m
    [32m  âœ“[0m[90m should throw if an invalid address is passed[0m
    [32m  âœ“[0m[90m should throw if an invalid amount is passed[0m
    [32m  âœ“[0m[90m should throw if an invalid origin address is passed[0m
    [32m  âœ“[0m[90m should throw if trying to transfer to itself[0m
    [32m  âœ“[0m[90m should throw if trying to transfer from an account with not enough funds[0m
[0m    #createToken()[0m
    [32m  âœ“[0m[90m should allow accounts[2] to create a TestToken[0m
    [32m  âœ“[0m[90m should allow accounts[8] to create a TestToken with voteScore and precision[0m[33m (68ms)[0m
    [32m  âœ“[0m[90m should create a TestToken passing any number as a string[0m
    [32m  âœ“[0m[90m should create a TestToken without freezing anything in 3.6.0[0m
    [32m  âœ“[0m[90m should throw if an invalid name is passed[0m
    [32m  âœ“[0m[90m should throw if an invalid abbrevation is passed[0m
    [32m  âœ“[0m[90m should throw if an invalid supply amount is passed[0m
    [32m  âœ“[0m[90m should throw if TRX ratio is not a positive integer[0m
    [32m  âœ“[0m[90m should throw if token ratio is not a positive integer[0m
    [32m  âœ“[0m[90m should throw if sale start is invalid[0m
    [32m  âœ“[0m[90m should throw if sale end is invalid[0m
    [32m  âœ“[0m[90m should throw if an invalid description is passed[0m
    [32m  âœ“[0m[90m should throw if an invalid url is passed[0m
    [32m  âœ“[0m[90m should throw if freeBandwidth is invalid[0m
    [32m  âœ“[0m[90m should throw if freeBandwidthLimit is invalid[0m
    [32m  âœ“[0m[90m should throw if frozen supply is invalid[0m
    [32m  âœ“[0m[90m should throw if frozen duration is invalid[0m
    [32m  âœ“[0m[90m should throw if the issuer address is invalid[0m
[0m      #createAsset()[0m
      [32m  âœ“[0m[90m should allow accounts[2] to create a TestToken[0m
[0m    #updateAccount()[0m
    [32m  âœ“[0m[90m should update accounts[3][0m
    [32m  âœ“[0m[90m should throw if an invalid name is passed[0m
    [32m  âœ“[0m[90m should throw if the issuer address is invalid[0m
[0m    #setAccountId()[0m
    [32m  âœ“[0m[90m should set account id accounts[4][0m
    [32m  âœ“[0m[90m should throw invalid account id error[0m
    [32m  âœ“[0m[90m should throw invalid owner address error[0m
[0m    #updateToken()[0m
    [32m  âœ“[0m[90m should allow accounts[2] to update a TestToken[0m
    [32m  âœ“[0m[90m should throw if an invalid description is passed[0m
    [32m  âœ“[0m[90m should throw if an invalid url is passed[0m
    [32m  âœ“[0m[90m should throw if freeBandwidth is invalid[0m
    [32m  âœ“[0m[90m should throw if freeBandwidthLimit is invalid[0m
    [32m  âœ“[0m[90m should throw if the issuer address is invalid[0m
[0m      #updateAsset()[0m
      [32m  âœ“[0m[90m should allow accounts[2] to update a TestToken[0m
[0m    #purchaseToken()[0m
    [32m  âœ“[0m[90m should verify that the asset has been created[0m
[33mSleeping for 4 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 4 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should allow accounts[2] to purchase a token created by accounts[5][0m[31m (8035ms)[0m
    [32m  âœ“[0m[90m should throw if issuerAddress is invalid[0m
    [32m  âœ“[0m[90m should throw if issuerAddress is not the right one[0m
    [32m  âœ“[0m[90m should throw if the token Id is invalid[0m
    [32m  âœ“[0m[90m should throw if token does not exist[0m
    [32m  âœ“[0m[90m should throw if buyer address is invalid[0m
    [32m  âœ“[0m[90m should throw if amount is invalid[0m
[0m    #sendToken()[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should verify that the asset has been created[0m
[33mSleeping for 4 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 1 second...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 4 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 1 second...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should allow accounts [7]  to send a token to accounts[1][0m[31m (10119ms)[0m
    [32m  âœ“[0m[90m should allow accounts [6]  to send a token to accounts[1][0m
    [32m  âœ“[0m[90m should throw if recipient address is invalid[0m
    [32m  âœ“[0m[90m should throw if the token Id is invalid[0m
    [32m  âœ“[0m[90m should throw if origin address is invalid[0m
    [32m  âœ“[0m[90m should throw if amount is invalid[0m
[0m    #createProposal[0m
    [32m  âœ“[0m[90m should allow the SR account to create a new proposal as a single object[0m
    [32m  âœ“[0m[90m should allow the SR account to create a new proposal as an array of objects[0m
    [32m  âœ“[0m[90m should throw if issuer address is invalid[0m
    [32m  âœ“[0m[90m should throw if the issuer address is not an SR[0m
[0m    #deleteProposal[0m
    [32m  âœ“[0m[90m should allow the SR to delete its own proposal[0m
    [32m  âœ“[0m[90m should throw trying to cancel an already canceled proposal[0m
[0m    #applyForSR[0m
    [36m  - should allow accounts[0] to apply for SR[0m
[0m    #freezeBalance[0m
    [32m  âœ“[0m[90m should allows accounts[1] to freeze its balance[0m
[0m    #vote[0m
    [36m  - should allows accounts[1] to vote for accounts[0] as SR[0m
[0m    #createSmartContract[0m
    [32m  âœ“[0m[90m should create a smart contract with default parameters[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should create a smart contract with array parameters[0m[31m (9102ms)[0m
    [32m  âœ“[0m[90m should create a smart contract and verify the parameters[0m
[0m    #triggerConstantContract[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should trigger constant contract successfully[0m[33m (58ms)[0m
[0m    #triggerComfirmedConstantContract[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should trigger confirmed constant contract successfully[0m[33m (51ms)[0m
[0m    #clearabi[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should clear contract abi[0m
[0m    #updateBrokerage[0m
    [32m  âœ“[0m[90m should update sr brokerage successfully[0m
    [32m  âœ“[0m[90m should throw invalid brokerage provided error[0m
    [32m  âœ“[0m[90m should throw brokerage must be an integer between 0 and 100 error[0m
    [32m  âœ“[0m[90m should throw invalid owner address provided error[0m
[0m    #triggerSmartContract[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m    [32m  âœ“[0m[90m should trigger smart contract successfully[0m[33m (59ms)[0m
[0m    #createTokenExchange[0m
    [32m  âœ“[0m[90m should create token exchange[0m
[0m    Alter existent transactions[0m
[0m      #extendExpiration[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m      [32m  âœ“[0m[90m should extend the expiration[0m[31m (3039ms)[0m
[0m      #addUpdateData[0m
      [32m  âœ“[0m[90m should add a data field[0m[33m (49ms)[0m
[0m      #alterTransaction[0m
      [32m  âœ“[0m[90m should alter the transaction adding a data field[0m[33m (44ms)[0m

[0m  TronWeb.trx[0m
[0m    #constructor()[0m
    [32m  âœ“[0m[90m should have been set a full instance in tronWeb[0m
[0m    #Account Test[0m
[0m      #getAccount[0m
      [32m  âœ“[0m[90m should get account by hex or base58 address[0m
      [32m  âœ“[0m[90m should throw address is not valid error[0m
[0m      #getAccountById[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m      [32m  âœ“[0m[90m should get confirmed account by id[0m[31m (9036ms)[0m
      [32m  âœ“[0m[90m should throw accountId is not valid error[0m
[0m      #getAccountResources[0m
      [32m  âœ“[0m[90m should get account resource by hex or base58 address[0m
      [32m  âœ“[0m[90m should throw address is not valid error[0m
[0m      #getBalance[0m
      [32m  âœ“[0m[90m should get balance by hex or base58 address[0m
[0m      #getBandwidth[0m
      [32m  âœ“[0m[90m should get bandwith by hex or base58 address[0m
[0m      #getUnconfirmedAccount[0m
      [32m  âœ“[0m[90m should get unconfirmed account by address[0m
      [32m  âœ“[0m[90m should throw address is not valid error[0m
[0m      #geUnconfirmedAccountById[0m
      [32m  âœ“[0m[90m should get unconfirmed account by id[0m
      [32m  âœ“[0m[90m should throw accountId is not valid error[0m
[0m      #getUnconfirmedBalance[0m
      [32m  âœ“[0m[90m should get unconfirmed balance by account address[0m
[0m      #updateAccount[0m
      [32m  âœ“[0m[90m should update account name[0m
      [32m  âœ“[0m[90m should throw name must be a string error[0m
[0m    #Sign Test[0m
[0m      #sign[0m
      [32m  âœ“[0m[90m should sign a transaction[0m
      [32m  âœ“[0m[90m should throw transaction not valid error[0m
      [32m  âœ“[0m[90m should throw transaction is already signed error[0m
      [32m  âœ“[0m[90m should throw private key does not match address error[0m
[0m      #signMessage[0m
      [32m  âœ“[0m[90m should sign a hex string message[0m
      [32m  âœ“[0m[90m should throw expected hex message input error[0m
[0m      #verifyMessage[0m
      [32m  âœ“[0m[90m should verify signature of signed string message[0m
      [32m  âœ“[0m[90m should throw expected hex message input error[0m
      [32m  âœ“[0m[90m should throw signature does not match error[0m
[0m      #multiSignTransaction[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m      [32m  âœ“[0m[90m should multi-sign a transaction by owner permission[0m
      [32m  âœ“[0m[90m should multi-sign a transaction by owner permission (permission id inside tx)[0m
      [32m  âœ“[0m[90m should verify weight after multi-sign by owner permission[0m[33m (74ms)[0m
      [32m  âœ“[0m[90m should verify weight after multi-sign by owner permission (permission id inside tx)[0m[33m (70ms)[0m
      [32m  âœ“[0m[90m should multi-sign a transaction with no permission error by owner permission[0m
      [32m  âœ“[0m[90m should multi-sign duplicated a transaction by owner permission[0m
      [32m  âœ“[0m[90m should multi-sign a transaction by active permission[0m
      [32m  âœ“[0m[90m should multi-sign a transaction by active permission (permission id inside tx)[0m
      [32m  âœ“[0m[90m should verify weight after multi-sign by active permission[0m[31m (77ms)[0m
      [32m  âœ“[0m[90m should verify weight after multi-sign by active permission (permission id inside tx)[0m[33m (72ms)[0m
      [32m  âœ“[0m[90m should multi-sign a transaction with no permission error by active permission[0m
      [32m  âœ“[0m[90m should multi-sign duplicated a transaction by active permission[0m
      [32m  âœ“[0m[90m should multi-sign a transaction with permission error by both owner and active permission[0m
      [32m  âœ“[0m[90m should multi-sign a transaction with wrong permission id error[0m
[0m    #Block Test[0m
[0m      #getBlock[0m
      [32m  âœ“[0m[90m should get earliest or latest block[0m
      [32m  âœ“[0m[90m should throw no block identifier provided error[0m
      [32m  âœ“[0m[90m should throw block not found error[0m
      [32m  âœ“[0m[90m should throw invalid block number provided error[0m
[0m      #getBlockByHash[0m
      [32m  âœ“[0m[90m should get block by block hash (id)[0m
[0m      #getBlockByNumber[0m
      [32m  âœ“[0m[90m should get block by block number[0m
[0m      #getBlockRange[0m
      [32m  âœ“[0m[90m should get block by range[0m
      [32m  âœ“[0m[90m should get invalid start or end error by range[0m
[0m      #getBlockTransactionCount[0m
      [32m  âœ“[0m[90m should get transaction count by block number, 'latest' or 'earliest'[0m
[0m      #getCurrentBlock[0m
      [32m  âœ“[0m[90m should get current block[0m
[0m    #Transaction Test[0m
[0m      #send[0m
      [32m  âœ“[0m[90m should send trx[0m
      [32m  âœ“[0m[90m should throw invalid recipient provided error[0m
      [32m  âœ“[0m[90m should throw invalid amount provided error[0m
[0m      #sendTransaction[0m
      [32m  âœ“[0m[90m should send trx[0m
      [32m  âœ“[0m[90m should throw invalid recipient provided error[0m
      [32m  âœ“[0m[90m should throw invalid amount provided error[0m
[0m      #sendTrx[0m
      [32m  âœ“[0m[90m should send trx[0m
      [32m  âœ“[0m[90m should throw invalid recipient provided error[0m
      [32m  âœ“[0m[90m should throw invalid amount provided error[0m
[0m      #freezeBalance[0m
      [32m  âœ“[0m[90m should freeze balance for energy or bandwidth[0m[33m (57ms)[0m
      [32m  âœ“[0m[90m should throw invalid resource provided: expected "BANDWIDTH" or "ENERGY" error[0m
      [32m  âœ“[0m[90m should throw invalid amount provided error[0m
      [32m  âœ“[0m[90m should throw invalid duration provided, minimum of 3 days error[0m
[0m      #broadcast[0m
      [32m  âœ“[0m[90m should broadcast a transaction[0m
      [32m  âœ“[0m[90m should throw invalid transaction provided error[0m
      [32m  âœ“[0m[90m should throw invalid options provided error[0m
      [32m  âœ“[0m[90m should throw transaction is not signed error[0m
[0m      #getTransaction[0m
      [32m  âœ“[0m[90m should get transaction by id[0m
      [32m  âœ“[0m[90m should throw transaction not found error[0m
[0m      #getTransactionFromBlock[0m
      [32m  âœ“[0m[90m should get transaction from block[0m
      [32m  âœ“[0m[90m should throw transaction not found error by transaction from block[0m
      [32m  âœ“[0m[90m should throw block not found error by transaction from block[0m
      [32m  âœ“[0m[90m should throw invalid index error by transaction from block[0m
[0m      #getTransactionInfo (Confirmed)[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m      [32m  âœ“[0m[90m should get transaction info by id[0m[31m (9037ms)[0m
[0m      #geUnconfirmedTransactionInfo[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m      [32m  âœ“[0m[90m should get unconfirmed transaction by id[0m[31m (3008ms)[0m
      [32m  âœ“[0m[90m should throw transaction not found error[0m
[0m      #getConfirmedTransaction[0m
[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m[33mSleeping for 3 seconds...[39m[33m Slept.[39m
[33m[39m      [32m  âœ“[0m[90m should get confirmed transaction by tx id[0m[31m (9036ms)[0m
[0m    #Token Test[0m
[0m      #sendAsset[0m
      [32m  âœ“[0m[90m should send trx by to address and verify account balance[0m
      [32m  âœ“[0m[90m should throw invalid recipient provided error[0m
      [32m  âœ“[0m[90m should throw invalid amount provided error[0m
      [32m  âœ“[0m[90m should throw invalid token ID provided error[0m
      [32m  âœ“[0m[90m should throw cannot transfer tokens to the same account provided error[0m
[0m      #sendToken[0m
      [32m  âœ“[0m[90m should send trx by to address and verify account balance[0m
      [32m  âœ“[0m[90m should throw invalid recipient provided error[0m
      [32m  âœ“[0m[90m should throw invalid amount provided error[0m
      [32m  âœ“[0m[90m should throw invalid token ID provided error[0m
      [32m  âœ“[0m[90m should throw cannot transfer tokens to the same account provided error[0m
[0m      #getTokenFromID[0m
      [32m  âœ“[0m[90m should get token by name[0m
      [32m  âœ“[0m[90m should throw invalid token ID provided error[0m
      [32m  âœ“[0m[90m should throw token does not exist error[0m
[0m      #getTokensIssuedByAddress[0m
      [32m  âœ“[0m[90m should get token by issued address[0m
      [32m  âœ“[0m[90m should throw invalid address provided error[0m
[0m      #listTokens[0m
      [32m  âœ“[0m[90m should list all tokens by limit[0m
      [32m  âœ“[0m[90m should throw invalid limit provided error[0m
      [32m  âœ“[0m[90m should throw invalid offset provided error[0m
[0m      #parseToken[0m
      [32m  âœ“[0m[90m should list all tokens by limit[0m
[0m    #Exchange Test[0m
[0m      #listExchanges[0m
      [32m  âœ“[0m[90m should get exchange by id[0m
[0m      #listExchangesPaginated[0m
      [32m  âœ“[0m[90m should get exchange by id[0m
[0m      #getExchangeByID[0m
      [32m  âœ“[0m[90m should get exchange by id[0m
[0m    #Proposal Test[0m
[0m      #getChainParameters[0m
      [32m  âœ“[0m[90m should get proposal list[0m
[0m      #getProposal[0m
      [32m  âœ“[0m[90m should get proposal by id[0m
      [32m  âœ“[0m[90m should throw invalid proposalID provided error[0m
[0m      #listProposals[0m
      [32m  âœ“[0m[90m should list seeds node[0m
[0m    #getContract[0m
    [32m  âœ“[0m[90m should get contract by contract address[0m
    [32m  âœ“[0m[90m should throw invalid contract address provided error[0m
    [32m  âœ“[0m[90m should throw contract does not exist error[0m
[0m    #listNodes[0m
    [32m  âœ“[0m[90m should list seeds node[0m
[0m    #listSuperRepresentatives[0m
    [32m  âœ“[0m[90m should list super representatives[0m
[0m    #timeUntilNextVoteCycle[0m
    [32m  âœ“[0m[90m should get time util next vote cycle[0m
[0m    #getReward[0m
    [32m  âœ“[0m[90m should get the reward[0m
[0m    #getUnconfirmedReward[0m
    [32m  âœ“[0m[90m should get the reward[0m
[0m    #getBrokerage[0m
    [32m  âœ“[0m[90m should get the brokerage[0m
[0m    #getUnconfirmedBrokerage[0m
    [32m  âœ“[0m[90m should get the brokerage[0m

[0m  TronWeb.utils.abi[0m
[0m    #decodeParams()[0m
    [32m  âœ“[0m[90m should decode abi coded params passing types and output[0m
    [32m  âœ“[0m[90m should decode abi coded params passing names, types and output[0m
    [36m  - should throw if the string does not start with 0x[0m
    [32m  âœ“[0m[90m should throw if the output format is wrong[0m
    [32m  âœ“[0m[90m should throw if the output is invalid[0m
    [32m  âœ“[0m[90m should decode if the output is prefixed with the method hash[0m
[0m    #encodeParams()[0m
    [32m  âœ“[0m[90m should encode abi coded params passing types and values[0m
    [32m  âœ“[0m[90m should encode abi coded params passing addresses in hex and base58 mode[0m

[0m  TronWeb.utils.accounts[0m
[0m    #generateAccount()[0m
    [32m  âœ“[0m[90m should generate a new account[0m

[0m  TronWeb.utils.base58[0m
[0m    #encode58()[0m
    [32m  âœ“[0m[90m should encode a buffer in base58 string[0m
    [32m  âœ“[0m[90m should return '' or '1' if passing something different from a buffer[0m
[0m    #decode58()[0m
    [32m  âœ“[0m[90m should decode a base58 string in a buffer[0m
    [32m  âœ“[0m[90m should return [] or [0] if passing something '' or '1'[0m

[0m  TronWeb.utils.bytes[0m
[0m    #byte2hexStr()[0m
    [32m  âœ“[0m[90m should convert a byte to a hex string[0m
    [32m  âœ“[0m[90m should throw if something else than a byte is passed as input[0m
[0m    #bytesToString()[0m
    [32m  âœ“[0m[90m should convert an array of bytes to a hex string[0m
    [32m  âœ“[0m[90m should return the input if the input is a string[0m
[0m    #hextoString()[0m
    [32m  âœ“[0m[90m should convert an hex string to a utf-8 string[0m
[0m    #byteArray2hexStr()[0m
    [32m  âœ“[0m[90m should convert an array of bytes to a hex string[0m
    [32m  âœ“[0m[90m should throw if the array of bytes is not valid[0m
[0m    #base64EncodeToString()[0m
    [32m  âœ“[0m[90m should encode a bytes array to a base64 string[0m
[0m    #base64DecodeFromString()[0m
    [32m  âœ“[0m[90m should decode a base64 string[0m

[0m  TronWeb.utils.code[0m
[0m    #bin2String()[0m
    [32m  âœ“[0m[90m should convert a byte to a hex string[0m
[0m    #arrayEquals()[0m
    [32m  âœ“[0m[90m should compare two arrays to see if they are equal[0m
[0m    #stringToBytes()[0m
    [32m  âœ“[0m[90m should convert a string to an array of bytes[0m
    [32m  âœ“[0m[90m should throw if something else than a string is passed as input[0m
[0m    #hexChar2byte()[0m
    [32m  âœ“[0m[90m should convert an hex char to a byte[0m
    [32m  âœ“[0m[90m should throw if something else than a string is passed as input[0m
[0m    #isHexChar()[0m
    [32m  âœ“[0m[90m should verify that an hex char is a valid hex char[0m
[0m    #hexStr2byteArray()[0m
    [32m  âœ“[0m[90m should verify that an hex char is a valid hex char[0m
    [32m  âœ“[0m[90m should throw if we pass an invalid hex string[0m
[0m    #strToDate()[0m
    [32m  âœ“[0m[90m should verify that an hex char is a valid hex char[0m
    [32m  âœ“[0m[90m should throw if we pass an invalid hex string[0m
[0m    #isNumber()[0m
    [32m  âœ“[0m[90m should verify that an numeric char is a number[0m
[0m    #getStringType()[0m
    [32m  âœ“[0m[90m should return the type of a string[0m

[0m  TronWeb.utils[0m
[0m    #isValidURL()[0m
    [32m  âœ“[0m[90m should verify good urls[0m
[0m    #isArray()[0m
    [32m  âœ“[0m[90m should verify that a value is an array[0m
[0m    #isJson()[0m
    [32m  âœ“[0m[90m should verify that a value is a JSON string[0m
[0m    #isBoolean()[0m
    [32m  âœ“[0m[90m should verify that a value is a JSON string[0m
[0m    #isBigNumber()[0m
    [32m  âœ“[0m[90m should verify that a value is a JSON string[0m
[0m    #isString()[0m
    [32m  âœ“[0m[90m should verify that a valyue is a string[0m
[0m    #isFunction()[0m
    [32m  âœ“[0m[90m should verify that a value is a function[0m
[0m    #isHex()[0m
    [32m  âœ“[0m[90m should verify that a string is an hex string[0m
[0m    #isInteger()[0m
    [32m  âœ“[0m[90m should verify that a value is an integer[0m
[0m    #hasProperty()[0m
    [32m  âœ“[0m[90m should verify that an object has a specific property[0m
[0m    #hasProperties()[0m
    [32m  âœ“[0m[90m should verify that an object has some specific properties[0m
[0m    #mapEvent()[0m
    [32m  âœ“[0m[90m should map an event result[0m
[0m    #padLeft()[0m
    [32m  âœ“[0m[90m should return the pad left of a string[0m
[0m    #ethersUtils()[0m
    [32m  âœ“[0m[90m should import sha256 from ethers and has a string[0m


[92m [0m[32m 339 passing[0m[90m (2m)[0m
[36m [0m[36m 3 pending[0m

